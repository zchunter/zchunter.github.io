---
import Layout from '../../layouts/Layout.astro';
import Contact from '../../components/Contact.astro';
import Footer from '../../components/Footer.astro';
import background from '../../assets/background.svg';
import '../../styles/xliff-tool.css';
---

<Layout>
    <img id="background" src={background.src} alt="" fetchpriority="high" />
    <main>
        <div class="container">
            <h1>XLIFF Text Swapper</h1>
            <p class="lead">Process XLIFF files from Articulate Rise with text replacements and Unicode corrections.</p>
            
            <div class="accordion">
                <div class="accordion-item">
                    <h2 class="accordion-header">
                        <button class="accordion-button collapsed" type="button" id="accordionToggle">
                            About This Tool & Privacy Information
                        </button>
                    </h2>
                    <div id="collapseInfo" class="accordion-content">
                        <div class="accordion-body">
                            <h5>What This Tool Does</h5>
                            <ul>
                                <li>Lints and corrects common Unicode substitutions (quotes, hyphens)</li>
                                <li>Replaces specified text pairs throughout the file</li>
                                <li>Replaces "source>" tags with "target>" tags</li>
                                <li>Properly handles XML formatting and escaping</li>
                                <li>Preserves special characters like &lt;, &gt;, &amp;, ", ', [, and ]</li>
                            </ul>
                            
                            <h5>Privacy Information</h5>
                            <ul>
                                <li><strong>Complete Privacy:</strong> Files never leave your computer</li>
                                <li><strong>No Server Processing:</strong> All processing happens in your browser</li>
                                <li><strong>Works Offline:</strong> Once loaded, the tool works without internet connection</li>
                                <li><strong>No Data Storage:</strong> No data is stored or tracked</li>
                            </ul>
                            
                            <h5>How It Works</h5>
                            <p>This tool uses JavaScript to process your XLIFF files directly in your browser. When you upload a file, it's read locally by your browser, processed according to your specifications, and then made available for download - all without sending any data to external servers.</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <form id="xliffForm">
                <div class="form-group">
                    <label for="xliffFile">Select XLIFF File:</label>
                    <input type="file" id="xliffFile" accept=".xlf">
                </div>
                
                <div class="form-group">
                    <label>Text Replacements:</label>
                    <div id="replacements">
                        <div class="replacement-row">
                            <input type="text" class="original" placeholder="Original Text">
                            <input type="text" class="replacement" placeholder="Replacement Text">
                            <button type="button" class="btn-remove">×</button>
                        </div>
                    </div>
                    <div class="button-group">
                        <button type="button" class="btn secondary" id="addReplacement">Add Replacement</button>
                        <button type="button" class="btn outline" id="importCSV">Import CSV</button>
                        <input type="file" id="csvFile" accept=".csv,.txt">
                    </div>
                </div>
                
                <button type="submit" class="btn primary">
                    Process XLIFF
                    <span class="spinner" id="spinner"></span>
                </button>
            </form>
            
            <div id="results">
                <h3>Processing Results</h3>
                <div id="replacementSummary"></div>
                <div class="button-group">
                    <a id="downloadLink" class="btn success" download="processed.xlf">Download Processed File</a>
                    <a id="downloadReportLink" class="btn outline" download="report.csv">Download Report CSV</a>
                </div>
            </div>
        </div>

        <Contact />
        <Footer />
    </main>
</Layout>

<script>
    // @ts-nocheck
    
    document.addEventListener('DOMContentLoaded', () => {
        try {
            // Initialize UI elements
            const accordionToggle = document.getElementById('accordionToggle');
            const collapseInfo = document.getElementById('collapseInfo');
            const resultsSection = document.getElementById('results');
            const spinner = document.getElementById('spinner');
            const addReplacementBtn = document.getElementById('addReplacement');
            const importCSVBtn = document.getElementById('importCSV');
            const csvFileInput = document.getElementById('csvFile');
            const xliffForm = document.getElementById('xliffForm');
            const replacementsContainer = document.getElementById('replacements');
            
            // Hide results initially
            if (resultsSection) resultsSection.style.display = 'none';
            
            // Helper function to create a replacement row
            function createReplacementRow(original = '', replacement = '') {
                // Clone the first row as a template to ensure consistent styling
                const template = document.querySelector('.replacement-row');
                if (template) {
                    const row = template.cloneNode(true);
                    
                    // Set values if provided
                    const originalInput = row.querySelector('.original');
                    const replacementInput = row.querySelector('.replacement');
                    
                    if (originalInput && original) originalInput.value = original;
                    if (replacementInput && replacement) replacementInput.value = replacement;
                    
                    // Add event listener to the remove button
                    const removeBtn = row.querySelector('.btn-remove');
                    if (removeBtn) {
                        removeBtn.addEventListener('click', () => {
                            // Only remove if there's more than one row
                            if (replacementsContainer && replacementsContainer.querySelectorAll('.replacement-row').length > 1) {
                                row.remove();
                            } else {
                                // Clear the fields instead of removing the last row
                                const inputs = row.querySelectorAll('input');
                                inputs.forEach(input => input.value = '');
                            }
                        });
                    }
                    
                    return row;
                } else {
                    // Fallback to creating elements if template not found
                    const row = document.createElement('div');
                    row.className = 'replacement-row';
                    
                    const originalInput = document.createElement('input');
                    originalInput.type = 'text';
                    originalInput.className = 'original';
                    originalInput.placeholder = 'Original Text';
                    if (original) originalInput.value = original;
                    
                    const replacementInput = document.createElement('input');
                    replacementInput.type = 'text';
                    replacementInput.className = 'replacement';
                    replacementInput.placeholder = 'Replacement Text';
                    if (replacement) replacementInput.value = replacement;
                    
                    const removeBtn = document.createElement('button');
                    removeBtn.type = 'button';
                    removeBtn.className = 'btn-remove';
                    removeBtn.textContent = '×';
                    removeBtn.addEventListener('click', () => row.remove());
                    
                    row.appendChild(originalInput);
                    row.appendChild(replacementInput);
                    row.appendChild(removeBtn);
                    
                    return row;
                }
            }
            
            // Helper function to collect replacements from the form
            function collectReplacements() {
                const replacements = [];
                document.querySelectorAll('.replacement-row').forEach(row => {
                    const originalInput = row.querySelector('.original');
                    const replacementInput = row.querySelector('.replacement');
                    
                    if (originalInput && replacementInput) {
                        const original = originalInput.value ? originalInput.value.trim() : '';
                        const replacement = replacementInput.value ? replacementInput.value.trim() : '';
                        
                        if (original && replacement) {
                            replacements.push([original, replacement]);
                        }
                    }
                });
                return replacements;
            }
            
            // Helper function to create object URLs and track them for cleanup
            const objectUrls = [];
            function createObjectURL(blob) {
                const url = URL.createObjectURL(blob);
                objectUrls.push(url);
                return url;
            }
            
            // Clean up object URLs when page unloads
            window.addEventListener('beforeunload', () => {
                objectUrls.forEach(url => URL.revokeObjectURL(url));
            });
            
            // Initialize accordion
            if (accordionToggle && collapseInfo) {
                accordionToggle.addEventListener('click', () => {
                    const isCollapsed = accordionToggle.classList.contains('collapsed');
                    accordionToggle.classList.toggle('collapsed');
                    collapseInfo.style.display = isCollapsed ? 'block' : 'none';
                });
            }
            
            // Add replacement row button
            if (addReplacementBtn && replacementsContainer) {
                addReplacementBtn.addEventListener('click', () => {
                    replacementsContainer.appendChild(createReplacementRow());
                });
            }
            
            // Function to add remove button event listeners
            function addRemoveButtonListeners() {
                document.querySelectorAll('.btn-remove').forEach(btn => {
                    if (btn) {
                        btn.addEventListener('click', () => {
                            const row = btn.closest('.replacement-row');
                            // Only remove if there's more than one row
                            if (row && replacementsContainer && replacementsContainer.querySelectorAll('.replacement-row').length > 1) {
                                row.remove();
                            } else if (row) {
                                // Clear the fields instead of removing the last row
                                const inputs = row.querySelectorAll('input');
                                inputs.forEach(input => input.value = '');
                            }
                        });
                    }
                });
            }
            
            // Add event listeners to existing remove buttons
            addRemoveButtonListeners();
            
            // Import CSV functionality
            if (importCSVBtn && csvFileInput) {
                importCSVBtn.addEventListener('click', () => csvFileInput.click());
                
                csvFileInput.addEventListener('change', (event) => {
                    try {
                        const input = event.target;
                        const file = input.files && input.files[0];
                        if (!file) return;
                        
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            try {
                                const fileReader = e.target;
                                const content = fileReader.result;
                                if (!content) return;
                                
                                const lines = content.toString().split(/\r?\n/);
                                if (!replacementsContainer) return;
                                
                                replacementsContainer.innerHTML = '';
                                
                                lines.forEach(line => {
                                    if (!line.trim()) return;
                                    
                                    // Parse CSV line properly handling quoted fields with commas
                                    const parseCSVLine = (text) => {
                                        const result = [];
                                        let current = '';
                                        let inQuotes = false;
                                        
                                        for (let i = 0; i < text.length; i++) {
                                            const char = text[i];
                                            
                                            if (char === '"') {
                                                inQuotes = !inQuotes;
                                            } else if (char === ',' && !inQuotes) {
                                                result.push(current.trim());
                                                current = '';
                                            } else {
                                                current += char;
                                            }
                                        }
                                        
                                        result.push(current.trim());
                                        return result;
                                    };
                                    
                                    const parts = parseCSVLine(line);
                                    if (parts.length < 2) return;
                                    
                                    let original = parts[0];
                                    let replacement = parts[1];
                                    
                                    // Remove surrounding quotes if present
                                    if (original.startsWith('"') && original.endsWith('"')) {
                                        original = original.substring(1, original.length - 1);
                                    }
                                    
                                    if (replacement.startsWith('"') && replacement.endsWith('"')) {
                                        replacement = replacement.substring(1, replacement.length - 1);
                                    }
                                    
                                    if (original && replacement) {
                                        replacementsContainer.appendChild(createReplacementRow(original, replacement));
                                    }
                                });
                            } catch (error) {
                                console.error('Error processing CSV:', error);
                                alert('Error processing CSV file. Please check the format.');
                            }
                        };
                        reader.onerror = () => alert('Error reading the CSV file.');
                        reader.readAsText(file);
                    } catch (error) {
                        console.error('Error handling CSV file:', error);
                    }
                });
            }
            
            // Form submission
            if (xliffForm) {
                xliffForm.addEventListener('submit', (event) => {
                    event.preventDefault();
                    
                    try {
                        const fileInput = document.getElementById('xliffFile');
                        if (!fileInput) return;
                        
                        const file = fileInput.files && fileInput.files[0];
                        if (!file) {
                            alert('Please select an XLIFF file.');
                            return;
                        }
                        
                        // Show spinner
                        if (spinner) spinner.style.display = 'inline-block';
                        
                        // Collect replacements
                        const replacements = collectReplacements();
                        
                        // Read and process the file
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            try {
                                const fileReader = e.target;
                                const content = fileReader.result;
                                if (!content) throw new Error('Could not read file content');
                                
                                // Function to fix Unicode characters
                                function fixUnicodeChars(text) {
                                    // Replace smart quotes with straight quotes
                                    text = text.replace(/[""]/g, '"');
                                    text = text.replace(/['']/g, "'");
                                    
                                    // Replace em-dash and en-dash with regular hyphen
                                    text = text.replace(/[—–]/g, '-');
                                    
                                    // Replace other common unicode substitutions
                                    text = text.replace(/…/g, '...');
                                    text = text.replace(/•/g, '*');
                                    
                                    return text;
                                }

                                // Function to escape special characters in XML
                                function escapeSpecialChars(text) {
                                    // First, temporarily replace existing XML entities to protect them
                                    const placeholders = {
                                        '&lt;': '___LT___',
                                        '&gt;': '___GT___',
                                        '&amp;': '___AMP___',
                                        '&quot;': '___QUOT___',
                                        '&apos;': '___APOS___',
                                    };
                                    
                                    // Replace entities with placeholders
                                    for (const [entity, placeholder] of Object.entries(placeholders)) {
                                        text = text.replace(new RegExp(entity, 'g'), placeholder);
                                    }
                                    
                                    // Now escape the special characters
                                    text = text.replace(/&/g, '&amp;');  // Must be first
                                    text = text.replace(/</g, '&lt;');
                                    text = text.replace(/>/g, '&gt;');
                                    text = text.replace(/"/g, '&quot;');
                                    text = text.replace(/'/g, '&apos;');
                                    
                                    // Handle square brackets
                                    text = text.replace(/\[/g, '&#91;');
                                    text = text.replace(/\]/g, '&#93;');
                                    
                                    // Restore the original XML entities
                                    for (const [entity, placeholder] of Object.entries(placeholders)) {
                                        text = text.replace(new RegExp(placeholder, 'g'), entity);
                                    }
                                    
                                    return text;
                                }

                                // Function to process XLIFF content
                                function processXliff(content, replacements) {
                                    // Fix unicode characters in the entire content first
                                    content = fixUnicodeChars(content);
                                    
                                    // Track replacement counts
                                    const replacementCounts = {};
                                    replacements.forEach(([original]) => {
                                        replacementCounts[original] = 0;
                                    });
                                    
                                    // Process source elements
                                    const sourcePattern = /(<source[^>]*>)(.*?)(<\/source>)/gs;
                                    
                                    content = content.replace(sourcePattern, (match, sourceTag, sourceContent, closingTag) => {
                                        // Apply replacements to the content and count them
                                        let processedContent = sourceContent;
                                        
                                        // First, protect any XML tags in the content
                                        const tagPlaceholders = [];
                                        processedContent = processedContent.replace(/<[^>]+>/g, (tag) => {
                                            const placeholder = `__TAG_${tagPlaceholders.length}__`;
                                            tagPlaceholders.push(tag);
                                            return placeholder;
                                        });
                                        
                                        replacements.forEach(([original, replacement]) => {
                                            // Escape special regex characters in the original string
                                            const escapedOriginal = original.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
                                            
                                            // Count occurrences in this specific source element
                                            const regex = new RegExp(escapedOriginal, 'g');
                                            const matches = processedContent.match(regex);
                                            const count = matches ? matches.length : 0;
                                            
                                            if (count > 0) {
                                                replacementCounts[original] += count;
                                                // Perform the replacement
                                                processedContent = processedContent.replace(regex, replacement);
                                            }
                                        });
                                        
                                        // Restore XML tags
                                        processedContent = processedContent.replace(/__TAG_(\d+)__/g, (match, index) => {
                                            return tagPlaceholders[parseInt(index)];
                                        });
                                        
                                        // Escape special characters in the processed content
                                        processedContent = escapeSpecialChars(processedContent);
                                        
                                        // Replace source with target
                                        const targetTag = sourceTag.replace('source', 'target');
                                        
                                        return targetTag + processedContent + closingTag.replace('source', 'target');
                                    });
                                    
                                    return { content, replacementCounts };
                                }
                                
                                const result = processXliff(content.toString(), replacements);
                                const processedContent = result.content;
                                const replacementCounts = result.replacementCounts || {};
                                
                                // Create download links
                                const downloadLink = document.getElementById('downloadLink');
                                if (downloadLink) {
                                    const blob = new Blob([processedContent], { type: 'application/xml' });
                                    downloadLink.href = createObjectURL(blob);
                                    downloadLink.download = file.name.replace('.xlf', '_processed.xlf');
                                }
                                
                                // Calculate totals
                                let totalReplacements = 0;
                                replacements.forEach(([original]) => {
                                    totalReplacements += replacementCounts[original] || 0;
                                });
                                
                                // Create report CSV
                                let reportCSV = 'Original Text,Replacement Text,Replacements Made\n';
                                replacements.forEach(([original, replacement]) => {
                                    reportCSV += `"${original}","${replacement}",${replacementCounts[original] || 0}\n`;
                                });
                                reportCSV += `"TOTAL","${replacements.length} patterns",${totalReplacements}\n`;
                                
                                const downloadReportLink = document.getElementById('downloadReportLink');
                                if (downloadReportLink) {
                                    const reportBlob = new Blob([reportCSV], { type: 'text/csv' });
                                    downloadReportLink.href = createObjectURL(reportBlob);
                                    downloadReportLink.download = 'replacement_report.csv';
                                }
                                
                                // Display summary
                                const replacementSummary = document.getElementById('replacementSummary');
                                if (replacementSummary) {
                                    let summaryHTML = '<table><thead><tr><th>Original Text</th><th>Replacement Text</th><th>Replacements Made</th></tr></thead><tbody>';
                                    
                                    replacements.forEach(([original, replacement]) => {
                                        summaryHTML += `<tr><td>${original}</td><td>${replacement}</td><td>${replacementCounts[original] || 0}</td></tr>`;
                                    });
                                    
                                    // Add total row
                                    summaryHTML += `<tr class="total-row"><td colspan="2"><strong>TOTAL (${replacements.length} patterns)</strong></td><td><strong>${totalReplacements}</strong></td></tr>`;
                                    
                                    summaryHTML += '</tbody></table>';
                                    replacementSummary.innerHTML = summaryHTML;
                                }
                                
                                // Show results
                                if (resultsSection) resultsSection.style.display = 'block';
                            } catch (error) {
                                console.error('Error processing XLIFF:', error);
                                alert('Error processing XLIFF file. Please check the file format.');
                            } finally {
                                // Hide spinner
                                if (spinner) spinner.style.display = 'none';
                            }
                        };
                        
                        reader.onerror = () => {
                            alert('Error reading the XLIFF file.');
                            if (spinner) spinner.style.display = 'none';
                        };
                        
                        reader.readAsText(file);
                    } catch (error) {
                        console.error('Error submitting form:', error);
                        alert('An error occurred. Please try again.');
                        if (spinner) spinner.style.display = 'none';
                    }
                });
            }
        } catch (error) {
            console.error('Error initializing XLIFF tool:', error);
        }
    });
</script>