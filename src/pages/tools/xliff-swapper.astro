---
import Layout from '../../layouts/Layout.astro';
import Contact from '../../components/Contact.astro';
import Footer from '../../components/Footer.astro';
import background from '../../assets/background.svg';
import { processXliff } from '../../scripts/xliff-tool.js';
import '../../styles/xliff-tool.css';
---

<Layout>
    <img id="background" src={background.src} alt="" fetchpriority="high" />
    <main>
        <div class="container">
            <h1>XLIFF Text Swapper</h1>
            <p class="lead">Process XLIFF files from Articulate Rise with text replacements and Unicode corrections.</p>
            
            <div class="accordion">
                <div class="accordion-item">
                    <h2 class="accordion-header">
                        <button class="accordion-button collapsed" type="button" id="accordionToggle">
                            About This Tool & Privacy Information
                        </button>
                    </h2>
                    <div id="collapseInfo" class="accordion-content">
                        <div class="accordion-body">
                            <h5>What This Tool Does</h5>
                            <ul>
                                <li>Lints and corrects common Unicode substitutions (quotes, hyphens)</li>
                                <li>Replaces specified text pairs throughout the file</li>
                                <li>Replaces "source>" tags with "target>" tags</li>
                                <li>Properly handles XML formatting and escaping</li>
                                <li>Preserves special characters like &lt;, &gt;, &amp;, ", ', [, and ]</li>
                            </ul>
                            
                            <h5>Privacy Information</h5>
                            <ul>
                                <li><strong>Complete Privacy:</strong> Files never leave your computer</li>
                                <li><strong>No Server Processing:</strong> All processing happens in your browser</li>
                                <li><strong>Works Offline:</strong> Once loaded, the tool works without internet connection</li>
                                <li><strong>No Data Storage:</strong> No data is stored or tracked</li>
                            </ul>
                            
                            <h5>How It Works</h5>
                            <p>This tool uses JavaScript to process your XLIFF files directly in your browser. When you upload a file, it's read locally by your browser, processed according to your specifications, and then made available for download - all without sending any data to external servers.</p>
                        </div>
                    </div>
                </div>
            </div>
            
            <form id="xliffForm">
                <div class="form-group">
                    <label for="xliffFile">Select XLIFF File:</label>
                    <input type="file" id="xliffFile" accept=".xlf">
                </div>
                
                <div class="form-group">
                    <label>Text Replacements:</label>
                    <div id="replacements">
                        <div class="replacement-row">
                            <input type="text" class="original" placeholder="Original Text">
                            <input type="text" class="replacement" placeholder="Replacement Text">
                            <button type="button" class="btn-remove">×</button>
                        </div>
                    </div>
                    <div class="button-group">
                        <button type="button" class="btn secondary" id="addReplacement">Add Replacement</button>
                        <button type="button" class="btn outline" id="importCSV">Import CSV</button>
                        <input type="file" id="csvFile" accept=".csv,.txt">
                    </div>
                </div>
                
                <button type="submit" class="btn primary">
                    Process XLIFF
                    <span class="spinner" id="spinner"></span>
                </button>
            </form>
            
            <div id="results">
                <h3>Processing Results</h3>
                <div id="replacementSummary"></div>
                <div class="button-group">
                    <a id="downloadLink" class="btn success" download="processed.xlf">Download Processed File</a>
                    <a id="downloadReportLink" class="btn outline" download="report.csv">Download Report CSV</a>
                </div>
            </div>
        </div>

        <Contact />
        <Footer />
    </main>
</Layout>

<script>
    // @ts-nocheck
    import { processXliff } from '../../scripts/xliff-tool.js';
    
    document.addEventListener('DOMContentLoaded', () => {
        try {
            // Initialize UI elements
            const accordionToggle = document.getElementById('accordionToggle');
            const collapseInfo = document.getElementById('collapseInfo');
            const resultsSection = document.getElementById('results');
            const spinner = document.getElementById('spinner');
            const addReplacementBtn = document.getElementById('addReplacement');
            const importCSVBtn = document.getElementById('importCSV');
            const csvFileInput = document.getElementById('csvFile');
            const xliffForm = document.getElementById('xliffForm');
            const replacementsContainer = document.getElementById('replacements');
            
            // Hide results initially
            if (resultsSection) resultsSection.style.display = 'none';
            
            // Helper function to create a replacement row
            function createReplacementRow(original = '', replacement = '') {
                // Clone the first row as a template to ensure consistent styling
                const template = document.querySelector('.replacement-row');
                if (template) {
                    const row = template.cloneNode(true);
                    
                    // Set values if provided
                    const originalInput = row.querySelector('.original');
                    const replacementInput = row.querySelector('.replacement');
                    
                    if (originalInput && original) originalInput.value = original;
                    if (replacementInput && replacement) replacementInput.value = replacement;
                    
                    // Add event listener to the remove button
                    const removeBtn = row.querySelector('.btn-remove');
                    if (removeBtn) {
                        removeBtn.addEventListener('click', () => row.remove());
                    }
                    
                    return row;
                } else {
                    // Fallback to creating elements if template not found
                    const row = document.createElement('div');
                    row.className = 'replacement-row';
                    
                    const originalInput = document.createElement('input');
                    originalInput.type = 'text';
                    originalInput.className = 'original';
                    originalInput.placeholder = 'Original Text';
                    if (original) originalInput.value = original;
                    
                    const replacementInput = document.createElement('input');
                    replacementInput.type = 'text';
                    replacementInput.className = 'replacement';
                    replacementInput.placeholder = 'Replacement Text';
                    if (replacement) replacementInput.value = replacement;
                    
                    const removeBtn = document.createElement('button');
                    removeBtn.type = 'button';
                    removeBtn.className = 'btn-remove';
                    removeBtn.textContent = '×';
                    removeBtn.addEventListener('click', () => row.remove());
                    
                    row.appendChild(originalInput);
                    row.appendChild(replacementInput);
                    row.appendChild(removeBtn);
                    
                    return row;
                }
            }
            
            // Helper function to collect replacements from the form
            function collectReplacements() {
                const replacements = [];
                document.querySelectorAll('.replacement-row').forEach(row => {
                    const originalInput = row.querySelector('.original');
                    const replacementInput = row.querySelector('.replacement');
                    
                    if (originalInput && replacementInput) {
                        const original = originalInput.value ? originalInput.value.trim() : '';
                        const replacement = replacementInput.value ? replacementInput.value.trim() : '';
                        
                        if (original && replacement) {
                            replacements.push([original, replacement]);
                        }
                    }
                });
                return replacements;
            }
            
            // Helper function to create object URLs and track them for cleanup
            const objectUrls = [];
            function createObjectURL(blob) {
                const url = URL.createObjectURL(blob);
                objectUrls.push(url);
                return url;
            }
            
            // Clean up object URLs when page unloads
            window.addEventListener('beforeunload', () => {
                objectUrls.forEach(url => URL.revokeObjectURL(url));
            });
            
            // Initialize accordion
            if (accordionToggle && collapseInfo) {
                accordionToggle.addEventListener('click', () => {
                    const isCollapsed = accordionToggle.classList.contains('collapsed');
                    accordionToggle.classList.toggle('collapsed');
                    collapseInfo.style.display = isCollapsed ? 'block' : 'none';
                });
            }
            
            // Add replacement row button
            if (addReplacementBtn && replacementsContainer) {
                addReplacementBtn.addEventListener('click', () => {
                    replacementsContainer.appendChild(createReplacementRow());
                });
            }
            
            // Add event listeners to existing remove buttons
            document.querySelectorAll('.btn-remove').forEach(btn => {
                if (btn) {
                    btn.addEventListener('click', () => {
                        const row = btn.closest('.replacement-row');
                        if (row) row.remove();
                    });
                }
            });
            
            // Import CSV functionality
            if (importCSVBtn && csvFileInput) {
                importCSVBtn.addEventListener('click', () => csvFileInput.click());
                
                csvFileInput.addEventListener('change', (event) => {
                    try {
                        const input = event.target;
                        const file = input.files && input.files[0];
                        if (!file) return;
                        
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            try {
                                const fileReader = e.target;
                                const content = fileReader.result;
                                if (!content) return;
                                
                                const lines = content.toString().split(/\r?\n/);
                                if (!replacementsContainer) return;
                                
                                replacementsContainer.innerHTML = '';
                                
                                lines.forEach(line => {
                                    if (!line.trim()) return;
                                    
                                    const parts = line.split(',').map(item => item.trim());
                                    if (parts.length < 2) return;
                                    
                                    const original = parts[0];
                                    const replacement = parts[1];
                                    
                                    if (original && replacement) {
                                        replacementsContainer.appendChild(createReplacementRow(original, replacement));
                                    }
                                });
                            } catch (error) {
                                console.error('Error processing CSV:', error);
                                alert('Error processing CSV file. Please check the format.');
                            }
                        };
                        reader.onerror = () => alert('Error reading the CSV file.');
                        reader.readAsText(file);
                    } catch (error) {
                        console.error('Error handling CSV file:', error);
                    }
                });
            }
            
            // Form submission
            if (xliffForm) {
                xliffForm.addEventListener('submit', (event) => {
                    event.preventDefault();
                    
                    try {
                        const fileInput = document.getElementById('xliffFile');
                        if (!fileInput) return;
                        
                        const file = fileInput.files && fileInput.files[0];
                        if (!file) {
                            alert('Please select an XLIFF file.');
                            return;
                        }
                        
                        // Show spinner
                        if (spinner) spinner.style.display = 'inline-block';
                        
                        // Collect replacements
                        const replacements = collectReplacements();
                        
                        // Read and process the file
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            try {
                                const fileReader = e.target;
                                const content = fileReader.result;
                                if (!content) throw new Error('Could not read file content');
                                
                                const result = processXliff(content.toString(), replacements);
                                const processedContent = result.content;
                                const replacementCounts = result.replacementCounts || {};
                                
                                // Create download links
                                const downloadLink = document.getElementById('downloadLink');
                                if (downloadLink) {
                                    const blob = new Blob([processedContent], { type: 'application/xml' });
                                    downloadLink.href = createObjectURL(blob);
                                    downloadLink.download = file.name.replace('.xlf', '_processed.xlf');
                                }
                                
                                // Create report CSV
                                let reportCSV = 'Original Text,Replacement Text,Count\n';
                                replacements.forEach(([original, replacement]) => {
                                    reportCSV += `"${original}","${replacement}",${replacementCounts[original] || 0}\n`;
                                });
                                
                                const downloadReportLink = document.getElementById('downloadReportLink');
                                if (downloadReportLink) {
                                    const reportBlob = new Blob([reportCSV], { type: 'text/csv' });
                                    downloadReportLink.href = createObjectURL(reportBlob);
                                    downloadReportLink.download = 'replacement_report.csv';
                                }
                                
                                // Display summary
                                const replacementSummary = document.getElementById('replacementSummary');
                                if (replacementSummary) {
                                    let summaryHTML = '<table><thead><tr><th>Original Text</th><th>Replacement Text</th><th>Count</th></tr></thead><tbody>';
                                    
                                    replacements.forEach(([original, replacement]) => {
                                        summaryHTML += `<tr><td>${original}</td><td>${replacement}</td><td>${replacementCounts[original] || 0}</td></tr>`;
                                    });
                                    
                                    summaryHTML += '</tbody></table>';
                                    replacementSummary.innerHTML = summaryHTML;
                                }
                                
                                // Show results
                                if (resultsSection) resultsSection.style.display = 'block';
                            } catch (error) {
                                console.error('Error processing XLIFF:', error);
                                alert('Error processing XLIFF file. Please check the file format.');
                            } finally {
                                // Hide spinner
                                if (spinner) spinner.style.display = 'none';
                            }
                        };
                        
                        reader.onerror = () => {
                            alert('Error reading the XLIFF file.');
                            if (spinner) spinner.style.display = 'none';
                        };
                        
                        reader.readAsText(file);
                    } catch (error) {
                        console.error('Error submitting form:', error);
                        alert('An error occurred. Please try again.');
                        if (spinner) spinner.style.display = 'none';
                    }
                });
            }
        } catch (error) {
            console.error('Error initializing XLIFF tool:', error);
        }
    });
</script>